package main

import (
	//"fmt"
	"github.com/gin-gonic/gin"
	_ "./docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/swaggo/gin-swagger"
	"github.com/swaggo/gin-swagger/swaggerFiles"
	userprofile_v"webgo/apps/userprofile/view"
	"webgo/log"
	"webgo/setting"
	userprofile_m "webgo/apps/userprofile/middlewares"
	"github.com/gin-contrib/cors"
	"time"
)

func main() {
	// Add a logger
	var logger log.Logging
	logger.GetLogger()
	defer logger.Close()

	// Load config
	var config setting.Config
	config.LoadConfig()

	r := gin.Default()
	r.Use(cors.New(cors.Config{
		AllowMethods:     []string{"GET", "POST", "PUT", "PATCH", "DELETE", "HEAD"},
		AllowHeaders:      []string{"Origin", "Content-Length", "Content-Type", "Authorization"},
		AllowCredentials: true,
		AllowAllOrigins: true,
		MaxAge: 12 * time.Hour,
	}))

	v1 := r.Group("api/v1")
	{
		v1.POST("user/register", userprofile_v.RegisterView)
		v1.POST("user/login", userprofile_v.LoginView)
		v1.POST("user/delete", userprofile_v.DeleteAccountView)
	}

	test := r.Group("api/test")
	//v1.Use(userprofile_m.JWTAuth()) //token auth
	test.Use(userprofile_m.JWTAuth())
	//e := casbin.NewEnforcer("webgo/apps/userprofile/middlewares/authz_model.conf", "webgo/apps/userprofile/middlewares/authz_policy.csv")
	//test.Use(authz.NewAuthorizer(e)) // role auth
	{
		test.GET("getdatabytime", userprofile_v.GetDataByTime)
	}

	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	r.Run(":80")
}



